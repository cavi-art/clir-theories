module ArrayImports
  use export array.Array
  use export array.ArrayPermut
  use export array.ArrayEq
  use export array.IntArraySorted
end

module ArrayLemmas
  use import int.Int
  use import ArrayImports


  lemma empty_range_is_sorted: forall a: array int, l u: int.
        u = length a -> l >= u -> sorted_sub a l u


  lemma permut_sub_commutative: forall a1 a2: array 'a, l u : int.
  0 <= l < u <= length a1 <= length a2 ->
  permut_sub a1 a2 l u -> permut_sub a2 a1 l u


  lemma array_eq_is_permut_sub: forall a1 a2: array 'a, l u : int.
  0 <= l < u <= length a1 = length a2 ->
  array_eq a1 a2 -> permut_sub a1 a2 l u


  lemma exchange_commutative: forall a1 a2: array 'a, i j : int.
  exchange a1 a2 i j <-> exchange a2 a1 i j <-> exchange a2 a1 j i <-> exchange a1 a2 j i


  lemma exchange_is_permut: forall a1 a2: array 'a, i j : int.
    0 <= i <= j < length a1 = length a2 ->
    exchange a1 a2 i j -> permut_sub a1 a2 i (j + 1)


  lemma permut_trans: forall a1 a2 a3: array 'a, i j : int.
    0 <= i <= j < length a1 = length a2 = length a3 ->
    permut_sub a1 a2 i (j + 1) -> permut_sub a2 a3 i (j+1) -> permut_sub a1 a3 i (j+1)


  lemma permut_trans_weakening: forall a1 a2 a3: array 'a, l1 l2 u1 u2: int.
        0 <= l1 <= l2 < u2 <= u1 < length a1 ->
        permut_sub a1 a2 l2 u2 -> permut_sub a2 a3 l2 u2 ->
        permut_sub a1 a3 l1 u1


  lemma sorted_meaning: forall a: array int, i j k: int.
        i <= k < j ->
        sorted_sub a i (j + 1) -> a[i] <= a[k] <= a[j]


  lemma is_sorted: forall a: array int, i j k l p: int.
                   i <= k <= p < l <= j ->
                   sorted_sub a i (j + 1) ->
                   a[k] <= a[p] <= a[l]


  lemma permut_null_interval: forall a: array 'a, l u: int.
                              0 <= l <= length a ->
                              0 <= u < length a ->
                              permut_sub a a u l


end

module ImmutabilityHelpers
  use import int.Int
  use import ArrayImports

  let arrCopy(v:array int):(array int)
      =
        ensures { length v = length result /\ forall i. 0<=i<length v -> result[i] = v[i] }
        ensures { array_eq result v }
        let v1 = make (length v) 1 in
        begin
                for i=0 to (length v)-1 do
                    invariant {forall j. 0<=j<i -> v1[j] = v[j]}
                    v1[i] <- v[i]
                done;
                v1
        end

  let swap (v:array int) (i:int) (j:int) : (array int)
    requires { 0 <= i < length v /\ 0 <= j < length v }
    ensures { exchange result v i j }
    = let v1 = arrCopy v in
      v1[i] <- v[j];
      v1[j] <- v[i];
      v1

end


(* Local Variables: *)
(* indent-tabs-mode: nil *)
(* End: *)
